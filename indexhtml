<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Home Energy Monitoring and Management System</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
  <style>
    :root {
      --primary: #00ff9d;
      --secondary: #00b8ff;
      --dark: #121212;
      --darker: #0a0a0a;
      --light: #f5f5f5;
      --gray: #333333;
      --warning: #ffcc00;
      --danger: #ff3333;
      --safe: #00cc66;
      --system-off: #6666ff;
    }
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Montserrat', sans-serif;
    }
    body {
      background-color: var(--dark);
      color: var(--light);
      min-height: 100vh;
      padding: 20px;
      display: flex;
      flex-direction: column;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(0, 184, 255, 0.05) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(0, 255, 157, 0.05) 0%, transparent 20%);
    }
    .container {
      max-width: 1400px;
      margin: 0 auto;
      flex: 1;
      width: 100%;
    }
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid var(--gray);
    }
    .greeting h1 {
      font-size: 2.2rem;
      font-weight: 600;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 5px;
    }
    .greeting p {
      color: #aaa;
      font-size: 1rem;
      font-weight: 300;
    }
    .status {
      display: flex;
      align-items: center;
      gap: 10px;
      background: rgba(40, 40, 40, 0.7);
      padding: 8px 15px;
      border-radius: 20px;
      border: 1px solid var(--gray);
    }
    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #ff3333;
    }
    .status.connected .status-indicator {
      background-color: var(--primary);
      animation: pulse 2s infinite;
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    .dashboard {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 15px;
    }
    .card {
      background-color: var(--darker);
      border-radius: 16px;
      padding: 25px;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25);
      transition: transform 0.3s, box-shadow 0.3s;
      border: 1px solid var(--gray);
      position: relative;
      overflow: hidden;
    }
    .card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
    }
    .card:hover {
      transform: translateY(-8px);
      box-shadow: 0 12px 40px rgba(0, 184, 255, 0.15);
    }
    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    .card-title {
      font-size: 1rem;
      font-weight: 500;
      color: #aaa;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    .card-icon {
      font-size: 1.4rem;
      opacity: 0.7;
    }
    .card-value {
      font-size: 2.6rem;
      font-weight: 700;
      margin-bottom: 5px;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      letter-spacing: -1px;
    }
    .card-unit {
      font-size: 1rem;
      color: #777;
      font-weight: 400;
    }
    
    /* System Status Card */
    .system-status-card {
      grid-column: span 2;
      display: flex;
      flex-direction: column;
    }
    .status-content {
      display: flex;
      align-items: center;
      flex: 1;
      gap: 20px;
    }
    .status-indicator-large {
      position: relative;
      width: 180px;
      height: 90px;
      flex-shrink: 0;
    }
    .semi-circle {
      position: absolute;
      width: 180px;
      height: 90px;
      overflow: hidden;
    }
    .semi-circle::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      width: 180px;
      height: 180px;
      border-radius: 50%;
      border: 8px solid #333;
    }
    .semi-circle-fill {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 180px;
      height: 180px;
      border-radius: 50%;
      border: 8px solid var(--safe);
      clip-path: polygon(0 100%, 100% 100%, 100% 50%, 0 50%);
      transform: rotate(0deg);
      transform-origin: center bottom;
      transition: transform 1s, border-color 0.5s;
    }
    .status-text {
      flex: 1;
    }
    .status-title {
      font-size: 1.4rem;
      font-weight: 600;
      margin-bottom: 10px;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    .status-message {
      font-size: 1.1rem;
      margin-bottom: 8px;
    }
    .carbon-info {
      display: flex;
      gap: 20px;
      margin-top: 10px;
    }
    .carbon-item {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .carbon-badge {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: var(--safe);
    }
    .carbon-badge.warning {
      background-color: var(--warning);
    }
    .carbon-badge.danger {
      background-color: var(--danger);
    }
    
    /* Chart Containers */
    .chart-section {
      margin-bottom: 20px;
    }
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    .chart-title {
      font-size: 1.1rem;
      font-weight: 500;
      color: #aaa;
    }
    .time-range-selector {
      display: flex;
      gap: 8px;
    }
    .time-range-btn {
      background-color: var(--gray);
      color: #aaa;
      border: none;
      padding: 8px 15px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.3s;
      font-weight: 500;
    }
    .time-range-btn:hover {
      background: rgba(0, 184, 255, 0.2);
    }
    .time-range-btn.active {
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      color: var(--dark);
      font-weight: 600;
    }
    .chart-container {
      background-color: var(--darker);
      padding: 25px;
      border-radius: 16px;
      border: 1px solid var(--gray);
      height: 400px;
      width: 100%;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
    }
    
    /* Section Dividers */
    .section-divider {
      margin: 25px 0;
      border: 0;
      height: 1px;
      background-image: linear-gradient(to right, transparent, var(--gray), transparent);
    }
    .section-title {
      font-size: 1.5rem;
      font-weight: 500;
      color: #aaa;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
    }
    .section-title::after {
      content: '';
      flex: 1;
      height: 1px;
      background: var(--gray);
      margin-left: 15px;
    }
    
    /* Relay Controls */
    .controls-section {
      margin: 20px 0;
    }
    .controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 20px;
      margin-top: 15px;
    }
    .control-card {
      background-color: var(--darker);
      border-radius: 16px;
      padding: 25px 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      border: 1px solid var(--gray);
      transition: all 0.3s;
      position: relative;
      overflow: hidden;
    }
    .control-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25);
      border-color: rgba(0, 255, 157, 0.3);
    }
    .control-card.active {
      border-color: var(--primary);
      box-shadow: 0 0 25px rgba(0, 255, 157, 0.15);
    }
    .control-card.active::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
    }
    .control-title {
      font-size: 1.1rem;
      margin-bottom: 20px;
      color: #aaa;
      text-align: center;
      font-weight: 500;
    }
    .power-icon {
      font-size: 2.5rem;
      margin-bottom: 20px;
      color: #444;
      transition: all 0.3s;
    }
    .control-card.active .power-icon {
      color: var(--primary);
      text-shadow: 0 0 15px rgba(0, 255, 157, 0.7);
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
      margin-bottom: 10px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #333;
      transition: .4s;
      border-radius: 34px;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    input:checked + .slider {
      background: linear-gradient(90deg, var(--primary), var(--secondary));
    }
    input:checked + .slider:before {
      transform: translateX(26px);
    }
    
    /* Footer */
    footer {
      text-align: center;
      padding: 20px 0;
      color: #666;
      font-size: 0.9rem;
      margin-top: 30px;
      border-top: 1px solid var(--gray);
    }
    
    @media (max-width: 768px) {
      .dashboard {
        grid-template-columns: 1fr 1fr;
      }
      
      .system-status-card {
        grid-column: span 2;
      }
      
      .controls {
        grid-template-columns: 1fr;
      }
      
      header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
      }
      
      .status {
        align-self: flex-start;
      }
      
      .chart-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }
      .time-range-selector {
        width: 100%;
        justify-content: flex-start;
      }
      
      .status-content {
        flex-direction: column;
        text-align: center;
      }
    }
    
    @media (max-width: 480px) {
      .dashboard, .controls {
        grid-template-columns: 1fr;
      }
      
      .system-status-card {
        grid-column: span 1;
      }
      
      .card-value {
        font-size: 2rem;
      }
      
      .time-range-selector {
        flex-wrap: wrap;
        justify-content: center;
      }
      
      .greeting h1 {
        font-size: 1.8rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="greeting">
        <h1>Welcome back...</h1>
        <p>Your home energy at a glance</p>
      </div>
      <div class="status" id="connectionStatus">
        <div class="status-indicator"></div>
        <span>Disconnected</span>
      </div>
    </header>

    <div class="dashboard">
      <div class="card">
        <div class="card-header">
          <span class="card-title">Voltage</span>
          <span class="card-icon">⚡</span>
        </div>
        <div class="card-value" id="voltage">0.00</div>
        <span class="card-unit">Volts</span>
      </div>
      
      <div class="card">
        <div class="card-header">
          <span class="card-title">Current</span>
          <span class="card-icon">🔌</span>
        </div>
        <div class="card-value" id="current">0.00</div>
        <span class="card-unit">Amps</span>
      </div>
      
      <div class="card">
        <div class="card-header">
          <span class="card-title">Power</span>
          <span class="card-icon">📊</span>
        </div>
        <div class="card-value" id="power">0.00</div>
        <span class="card-unit">Watts</span>
      </div>
      
      <div class="card">
        <div class="card-header">
          <span class="card-title">Energy</span>
          <span class="card-icon">🔋</span>
        </div>
        <div class="card-value" id="energy">0.00</div>
        <span class="card-unit">kWh</span>
      </div>
      
      <div class="card">
        <div class="card-header">
          <span class="card-title">Frequency</span>
          <span class="card-icon">🔄</span>
        </div>
        <div class="card-value" id="frequency">0.00</div>
        <span class="card-unit">Hz</span>
      </div>
      
      <div class="card">
        <div class="card-header">
          <span class="card-title">Power Factor</span>
          <span class="card-icon">📐</span>
        </div>
        <div class="card-value" id="powerFactor">0.00</div>
        <span class="card-unit">Ratio</span>
      </div>
      
      <div class="card">
        <div class="card-header">
          <span class="card-title">Carbon Emission</span>
          <span class="card-icon">🌍</span>
        </div>
        <div class="card-value" id="carbonEmission">0.00</div>
        <span class="card-unit">kg CO2e</span>
      </div>

          <div class="card system-status-card">
        <div class="card-header">
          <span class="card-title">System Status</span>
          <span class="card-icon">🌿</span>
        </div>
        <div class="status-content">
          <div class="status-indicator-large">
            <div class="semi-circle">
              <div class="semi-circle-fill" id="statusIndicator"></div>
            </div>
          </div>
          <div class="status-text">
            <div class="status-title" id="statusTitle">System Initializing</div>
            <div class="status-message" id="statusMessage">Waiting for data...</div>
            <div class="carbon-info">
              <div class="carbon-item">
                <div class="carbon-badge" id="carbonStatus"></div>
                <span>Carbon Footprint</span>
              </div>
              <div class="carbon-item">
                <div class="carbon-badge" id="airStatus"></div>
                <span>Air Quality</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
    </div>

    <!-- Relay Controls Section -->
    <div class="controls-section">
      <h3 class="section-title">Mains Control</h3>
      <div class="controls" id="relayControls"></div>
    </div>

    <hr class="section-divider">
    
    <!-- Energy Chart Section -->
    <div class="chart-section">
      <h3 class="section-title">Energy Consumption History</h3>
      <div class="chart-header">
        <h3 class="chart-title">Historical Energy Usage</h3>
        <div class="time-range-selector" id="energy-range">
          <button class="time-range-btn active" data-range="24">Last 24h</button>
          <button class="time-range-btn" data-range="168">Last 7d</button>
          <button class="time-range-btn" data-range="672">Last 4w</button>
        </div>
      </div>
      <div class="chart-container"><canvas id="energyChart"></canvas></div>
    </div>
  </div>
  
  <footer>
    IoT Real-Time Smart Energy Meter for Real-Time Carbon Emission Visualization
  </footer>

  <script>
    // Constants for thresholds
    const CARBON_LIMIT_KG = 600.0;
    const CO2_PPM_THRESHOLD = 2000.0;
    
    let dataTimeoutHandle;
    // Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyDulSyTqydqL3n8WwY0KAqa9dgVSP3BQiE",
      authDomain: "iyanu-cfp-meter.firebaseapp.com",
      databaseURL: "https://iyanu-cfp-meter-default-rtdb.firebaseio.com",
      projectId: "iyanu-cfp-meter",
      storageBucket: "iyanu-cfp-meter.firebasestorage.app",
      messagingSenderId: "349401483580",
      appId: "1:349401483580:web:bd66935087755c80e8f639"
    };
    
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    const database = firebase.database();
    const connectionStatus = document.getElementById('connectionStatus');

    // Connection state monitoring
    firebase.database().ref('.info/connected').on('value', (snapshot) => {
      if (snapshot.val() === true) {
        connectionStatus.classList.add('connected');
        connectionStatus.querySelector('span').textContent = 'Connected';
      } else {
        connectionStatus.classList.remove('connected');
        connectionStatus.querySelector('span').textContent = 'Disconnected';
      }
    });

    // Data storage for charts
    let allEnergyData = [];
    let currentEnergyRange = 24; // hours for energy chart
    
    // Initialize chart
    const energyCtx = document.getElementById("energyChart").getContext("2d");
    
    // Energy Chart
    const energyChart = new Chart(energyCtx, {
      type: 'line',
      data: {
        datasets: [{
          label: 'Energy (kWh)',
          data: [],
          borderColor: '#00b8ff',
          backgroundColor: 'rgba(0, 184, 255, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.3,
          pointRadius: 0,
          pointBackgroundColor: '#00b8ff',
          pointHoverRadius: 5
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            type: 'time',
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: '#aaa',
              font: {
                size: 11
              }
            },
            title: {
              display: true,
              text: 'Time',
              color: '#aaa',
              font: {
                size: 13
              }
            }
          },
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: '#aaa',
              font: {
                size: 12
              }
            },
            title: {
              display: true,
              text: 'Energy (kWh)',
              color: '#aaa',
              font: {
                size: 13
              }
            }
          }
        },
        plugins: {
          legend: {
            labels: {
              color: '#fff',
              boxWidth: 0,
              font: {
                size: 13
              }
            }
          },
          tooltip: {
            mode: 'index',
            intersect: false,
            backgroundColor: 'rgba(0, 0, 0, 0.85)',
            titleColor: '#00b8ff',
            bodyColor: '#fff',
            borderColor: 'rgba(255, 255, 255, 0.1)',
            borderWidth: 1,
            padding: 12,
            cornerRadius: 8,
            displayColors: false,
            callbacks: {
              title: function(tooltipItems) {
                return 'Energy Usage';
              },
              label: function(context) {
                return `Energy: ${context.parsed.y.toFixed(3)} kWh`;
              }
            }
          }
        }
      }
    });
    
    // Update energy chart with time filter
    function updateEnergyChart() {
      const now = Date.now();
      const maxAge = currentEnergyRange * 60 * 60 * 1000; // Convert to milliseconds
      
      // Filter data based on current time range
      const filteredData = allEnergyData.filter(point => now - point.x <= maxAge);
      
      // Update chart
      energyChart.data.datasets[0].data = filteredData;
      energyChart.update();
    }
    
    // Time range selectors for energy chart
    document.querySelectorAll('#energy-range .time-range-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        document.querySelectorAll('#energy-range .time-range-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        currentEnergyRange = parseInt(this.dataset.range);
        updateEnergyChart();
      });
    });

    // Update system status display
    function updateSystemStatus(relayState, carbonEmission, airQuality) {
      const statusIndicator = document.getElementById('statusIndicator');
      const statusTitle = document.getElementById('statusTitle');
      const statusMessage = document.getElementById('statusMessage');
      const carbonStatus = document.getElementById('carbonStatus');
      const airStatus = document.getElementById('airStatus');
      
      // Calculate carbon footprint status
      const carbonFootprint = carbonEmission > CARBON_LIMIT_KG ? 'danger' : 'safe';
      const airFootprint = airQuality > CO2_PPM_THRESHOLD ? 'danger' : 'safe';
      
      // Set status badge colors
      carbonStatus.className = `carbon-badge ${carbonFootprint === 'danger' ? 'danger' : 'safe'}`;
      airStatus.className = `carbon-badge ${airFootprint === 'danger' ? 'danger' : 'safe'}`;
      
      if (!relayState) {
        // System is off
        statusIndicator.style.borderColor = '#6666ff';
        statusIndicator.style.transform = 'rotate(0deg)';
        statusTitle.textContent = "System Off";
        statusMessage.textContent = "Turned Off";
        statusTitle.style.background = 'linear-gradient(90deg, #6666ff, #6666ff)';
      } else if (carbonFootprint === 'safe' && airFootprint === 'safe') {
        // System on and safe
        statusIndicator.style.borderColor = '#00cc66';
        statusIndicator.style.transform = 'rotate(180deg)';
        statusTitle.textContent = "System On";
        statusMessage.textContent = "Carbon Footprint Okay";
        statusTitle.style.background = 'linear-gradient(90deg, #00cc66, #00cc66)';
      } else {
        // System on but footprint high
        statusIndicator.style.borderColor = '#ffcc00';
        statusIndicator.style.transform = 'rotate(90deg)';
        statusTitle.textContent = "System On";
        statusMessage.textContent = "Carbon Footprint High";
        statusTitle.style.background = 'linear-gradient(90deg, #ffcc00, #ffcc00)';
        
        // If either is in danger, show warning
        if (carbonFootprint === 'danger' || airFootprint === 'danger') {
          statusIndicator.style.borderColor = '#ff3333';
          statusTitle.textContent = "System Off";
          statusMessage.textContent = "Carbon Footprint High";
          statusTitle.style.background = 'linear-gradient(90deg, #ff3333, #ff3333)';
        }
      }
    }
    
    // Reset all displayed values
    function resetDisplay() {
      document.getElementById('voltage').textContent = "0.00";
      document.getElementById('current').textContent = "0.00";
      document.getElementById('power').textContent = "0.00";
      document.getElementById('energy').textContent = "0.000";
      document.getElementById('frequency').textContent = "0.00";
      document.getElementById('powerFactor').textContent = "0.00";
      document.getElementById('carbonEmission').textContent = "0.00";
      
      // Update status to indicate no data
      document.getElementById('statusTitle').textContent = "No Data";
      document.getElementById('statusMessage').textContent = "Device disconnected or not responding";
      document.getElementById('statusIndicator').style.borderColor = '#aaaaaa';
      document.getElementById('statusTitle').style.background = 'linear-gradient(90deg, #aaaaaa, #aaaaaa)';
      document.getElementById('carbonStatus').className = "carbon-badge";
      document.getElementById('airStatus').className = "carbon-badge";
      
      // Clear charts
      energyChart.data.datasets[0].data = [];
      energyChart.update();
    }

    // Listen for realtime data updates
    database.ref('smart_meter').on('value', (snapshot) => {
      const data = snapshot.val();
      if (data) {
        // Reset the timeout on new data
        if (dataTimeoutHandle) {
          clearTimeout(dataTimeoutHandle);
        }
        
        // Set new timeout
        dataTimeoutHandle = setTimeout(() => {
          resetDisplay();
        }, 30000); // 30 seconds
        
        // Update values with correct field names
        document.getElementById('voltage').textContent = data.voltage.toFixed(2);
        document.getElementById('current').textContent = data.current.toFixed(2);
        document.getElementById('power').textContent = data.power.toFixed(2);
        document.getElementById('energy').textContent = data.energy.toFixed(3); // Fixed field name
        document.getElementById('frequency').textContent = data.frequency.toFixed(2);
        document.getElementById('powerFactor').textContent = data.power_factor.toFixed(2);
        document.getElementById('carbonEmission').textContent = data.co2_emission_kg.toFixed(3);
        
        const timestamp = Date.now();
        
        // Add new energy data point
        allEnergyData.push({
          x: timestamp,
          y: data.energy // Fixed field name
        });
        
        // Update chart
        updateEnergyChart();
        
        // Update system status
        updateSystemStatus(data.relay_state, data.co2_emission_kg, data.mq2_ppm);
      }
    });

    // Create relay control
    const relayControls = document.getElementById("relayControls");
    
    const div = document.createElement("div");
    div.className = "control-card";
    div.innerHTML = `
      <div class="power-icon">⚡</div>
      <h3 class="control-title">Mains Power</h3>
      <label class="switch">
        <input type="checkbox" id="switch1">
        <span class="slider"></span>
      </label>
    `;
    relayControls.appendChild(div);
    const checkbox = div.querySelector("input");
    const ref = database.ref('control/relay1');
    
    // Listen for Firebase updates
    ref.on('value', (snapshot) => {
      const state = snapshot.val();
      checkbox.checked = state;
      if (state) {
        div.classList.add('active');
      } else {
        div.classList.remove('active');
      }
    });
    
    // Handle user input
    checkbox.addEventListener('change', function() {
      const state = this.checked;
      ref.set(state);
    });

    // Load previous data
    function loadHistoricalData() {
  const historyRef = database.ref('history');
  historyRef.once('value', snapshot => {
    const data = snapshot.val();
    if (!data) return;
    
    allEnergyData = [];

    Object.entries(data).forEach(([key, value]) => {
      const timestamp = parseInt(key) * 1000; // convert seconds to ms ✅
      allEnergyData.push({ x: timestamp, y: value.energy });
    });

    updateEnergyChart();
  });
}
    
    // Call to load previous data
    loadHistoricalData();
    
    // Initialize timeout for data reset
    dataTimeoutHandle = setTimeout(() => {
      resetDisplay();
    }, 30000);
    
  </script>
</body>
</html>
